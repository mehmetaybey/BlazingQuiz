@page "/admin/manage-students"
@inject IUserApi UserApi
@inject IAppState AppState


<SectionContent SectionName="pageTitle">Manage Students</SectionContent>

<div class="row">
    <div class="col-sm-4 ms-auto mb-3">
        <label class="form-label">Filter by Approval Status: </label>
    </div>
    <div class="col-sm-4">
        <select class="form-control" @bind="_filter" @bind:after="OnFilterChangedAsync">
            @foreach (var f in Enum.GetValues<UserApprovedFilter>())
            {
                <option value="@f">@f</option>
            }
        </select>
    </div>
</div>
<div class="row">

    <QuickGrid ItemsProvider="_usersProvider" @ref="_grid" Pagination="_paginationState" Class="table table-striped table-hover">
        <PropertyColumn Property="u=>u.Id "/>
        <PropertyColumn Property="u=>u.Name "/>
        <PropertyColumn Property="u=>u.Email " />
        <PropertyColumn Property="u=>u.Phone " />
        <TemplateColumn Title="Is Approved ? ">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" checked="@(context.IsApproved)" role="switch" id="u_@context.Id" @onchange="()=>OnUserApprovedToggleAsync(context)" />
                <label class="form-check-label" for="u_@context.Id">
                    @(context.IsApproved ? "Yes" : "No")
                </label>
            </div>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="_paginationState"/>

</div>

@code {
    private QuickGrid<UserDto>? _grid;
    private const int DefaultPageSize = 10;
    private GridItemsProvider<UserDto> _usersProvider;
    private UserApprovedFilter _filter = UserApprovedFilter.All;
    private PaginationState _paginationState = new PaginationState {ItemsPerPage = DefaultPageSize};

    protected override  void OnInitialized()
    {
        _usersProvider = async request =>
        {
            AppState.ShowLoader("Fetching students");
            var pagedResult = await UserApi.GetUsersAsync(_filter, request.StartIndex,request.Count ?? DefaultPageSize);
            AppState.HideLoader();
            return GridItemsProviderResult.From(pagedResult.Records,pagedResult.TotalCount);
        };
    }

    private async Task OnUserApprovedToggleAsync(UserDto user)
    {
        user.IsApproved = !user.IsApproved;
        _shouldRender = false;
        AppState.ShowLoader("Updating user approval status");
        await UserApi.ToggleUserApprovedStatusAsync(user.Id);
        _shouldRender = true;
        AppState.HideLoader();
    }

    private bool _shouldRender=true;

    protected override bool ShouldRender() => _shouldRender;

    private async Task OnFilterChangedAsync()
    {
        if(_grid != null)
            await _grid.RefreshDataAsync();
    }

}
