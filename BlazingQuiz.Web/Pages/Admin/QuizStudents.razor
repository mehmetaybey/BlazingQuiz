@page "/admin/quizzes{quizId:guid}/view-students"

@inject IAdminApi AdminApi
@inject IAppState AppState

<SectionContent SectionName="pageTitle">Quiz Students</SectionContent>

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="d-flex gap-3">
                <h6><strong>Quiz :</strong>  @_quizName</h6>
                <h6><strong>Category :</strong> @_categoryName</h6>
            </div>
        </div>
        <hr/>
        <div class="col-sm-12">
            <QuickGrid ItemsProvider="_studentsProvider" Pagination="_paginationState" Class="table table-striped table-hover">
                <PropertyColumn Property="s =>s.Name " Title="Student Name"/>
                <PropertyColumn Property="s =>s.StartedOn " Title="Started" Format="MM-dd-yyyy hh:mm"/>
                <TemplateColumn Title="Completed" Context="context">
                    @if (context.CompletedOn.HasValue)
                    {
                        <span>@context.CompletedOn.Value.ToString("dd MM yyyy hh:mm")</span>
                    }
                    else
                    {
                        @if (context.Status == "Exited")
                        {
                            <span>Quiz Exited</span>
                        }
                        else
                        {
                            <span>Not Completed</span>
                        }
                    }
                </TemplateColumn>
                <PropertyColumn Property="s =>s.Status" />
                <PropertyColumn Property="s =>s.Score" />
            </QuickGrid>
            <Paginator State="_paginationState"/>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid QuizId { get; set; }

    private GridItemsProvider<AdminQuizStudentDto> _studentsProvider;
    private string? _quizName;
    private string? _categoryName;
    private bool _fetchQuizInfo =true;
    private const int DefaultPageSize = 15;

    private PaginationState _paginationState = new() {ItemsPerPage = DefaultPageSize};

    protected override void OnInitialized()
    {
        _studentsProvider = async request =>
        {
            AppState.ShowLoader("Fetching students");
            try
            {
                var result = await AdminApi.GetQuizStudentAsync(QuizId, request.StartIndex, request.Count ?? DefaultPageSize, _fetchQuizInfo);
                if (_fetchQuizInfo)
                {
                    _quizName = result.QuizName;
                    _categoryName = result.CategoryName;
                    _fetchQuizInfo = false;
                    InvokeAsync(StateHasChanged);
                }

                return GridItemsProviderResult.From(result.Students.Records, result.Students.TotalCount);
                
            }
            catch (Exception e)
            {
                AppState.ShowError(e.Message);
            }
            finally
            {
                AppState.HideLoader();
            }

            return GridItemsProviderResult.From<AdminQuizStudentDto>([],0);
        };
      
    }

}