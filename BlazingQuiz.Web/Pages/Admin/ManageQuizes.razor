@page "/admin/manage-quizzes"
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IAppState AppState

<SectionContent SectionName="pageTitle">Manage Quizes</SectionContent>


<div class="container">

    <div class="row">
        <div class="col-sm-3 ms-auto">
            <label class="form-label">Select Category</label>
            <select class="form-control" @onchange="OnSelectCategoryChanged">
                <option value="0">Select Category</option>
                @foreach (var c in _categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Number of Questions</th>
                    <th>Time (in Minutes)</th>
                </tr>
            </thead>
            <tbody>
                @if (_filtredQuizzes.Length == 0)
                {
                    <tr>
                        <td colspan="5">
                            <p class="text-danger text-center h5">No Quizes found</p>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var q in _filtredQuizzes)
                    {
                        <tr>
                            <td>@q.Name</td>
                            <td>@q.CategoryName</td>
                            <td>@q.TotalQuestions questions</td>
                            <td>@q.TimeInMinutes in minutes</td>
                            <td>
                                <div class="d-flex justify-content-around">
                                    <button type="button" class="btn btn-sm btn-info" @onclick="() => ViewQuestionsAsync(q)">View Questions</button>
                                    <a href="admin/edit-quizes/@q.Id" class="btn btn-sm btn-primary">Edit Questions</a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@if (_showQuestionModal)
{
    <Modal Title="Questions"
    Size="ModalSize.Large"
    ActionButtonText="Ok"
    OnActionButtonClick="EventCallback.Factory.Create(this, () => _showQuestionModal = false)"
    OnCancelButtonClick="EventCallback.Factory.Create(this, () => _showQuestionModal = false)">
        @foreach (var q in _viewingQuestions)
        {
            <div class="mb-3 shadow p-2">
                <p>@q.Text</p>
            </div>
        }
    </Modal>
}

@code {
    private QuizListDto[] _quizzes = [];
    private QuizListDto[] _filtredQuizzes = [];
    private CategoryDto[] _categories = [];
    private string _selectCategory = "0";
    private QuestionDto[] _viewingQuestions = [];
    private bool _showQuestionModal;

    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Fetching quizes and categories");
        try
        {
            var quizesTask = QuizApi.GetQuizzesAsync();
            _categories = await CategoryApi.GetCategoriesAsync();
            _quizzes = await quizesTask;
            _filtredQuizzes = _quizzes;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            AppState.HideLoader();
        }

    }

    private void OnSelectCategoryChanged(ChangeEventArgs e)
    {
        _selectCategory = e.Value.ToString();

        if (_selectCategory == "0")
        {
            _filtredQuizzes = _quizzes;
        }
        else
        {
            _filtredQuizzes = _quizzes.Where(q => q.CategoryId.ToString() == _selectCategory).ToArray();
        }
    }

    private async Task ViewQuestionsAsync(QuizListDto q)
    {
        AppState.ShowLoader("Fetching questions");
        _viewingQuestions = await QuizApi.GetQuizQuestionsAsync(q.Id);
        AppState.HideLoader();
        _showQuestionModal=true;
    }

}
