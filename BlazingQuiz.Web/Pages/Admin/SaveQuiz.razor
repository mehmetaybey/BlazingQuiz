@page "/admin/add-quizes"
@page "/admin/edit-quizes/{quizId:guid?}"
@using BlazingQuiz.Shared.Components.Api


@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IAppState AppState


<SectionContent SectionName="pageTitle">@(IsEditCase ? "Update Quiz" : "Add New Quiz")</SectionContent>

<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
                    <option value="0">Select Category</option>
                    @foreach (var c in _categories)
                    {
                        <option value="@c.Id">@c.Name</option>

                    }
                </InputSelect>
                <ValidationMessage For="@(() => _quiz.CategoryId)" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="_quiz.Name" />
                <ValidationMessage For="@(() => _quiz.CategoryId)" />
            </div>
        </div>

        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Total Questions</label>
                <InputNumber class="form-control" @bind-Value="_quiz.TotalQuestions" />
                <ValidationMessage For="@(() => _quiz.TotalQuestions)" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Time (in minutes)</label>
                <InputNumber class="form-control" @bind-Value="_quiz.TimeInMinutes" />
                <ValidationMessage For="@(() => _quiz.TimeInMinutes)" />
            </div>
        </div>
        
        <hr class="my-2"/>
        <h5 class="fw-bold">Questions</h5>
        
        <ol class="mb-0">
            @foreach (var q in _quiz.Question)
            {
                var random= Guid.NewGuid();

                <li class="bg-white p-3 mb-3">
                    <textarea  @bind="q.Text" class="form-control" rows="3" />
                    <h6 class="my-2 fw-bold">Options</h6>
                    <ol>
                        @foreach(var o in q.Options)
                        {
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" 
                                               type="radio" 
                                               name="option_radio_ @random" 
                                               checked="@o.IsCorrect" 
                                               @onchange="() => SetOptionAsCorrectAnswer(q,o) ">
                                    </div>
                                    <input type="text" @bind="o.Text" class="form-control" >
                                    <button class="btn btn-danger" type="button" @onclick="() => q.Options.Remove(o)">X</button>

                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-sm btn-info" @onclick="() => q.Options.Add(new())">Add Option</button>
                    </div>
                </li>

            }
        </ol>
        <div class="mt-0 mb-3 d-flex justify-content-center">
            <button type="button" class="btn btn-info" @onclick="() => _quiz.Question.Add(GetDefaultEmptyQuestion())">Add Question</button>
        </div>

        <hr />
        <div class="row mb-5 align-items-center">
            <div class="col-sm-3 ms-auto d-flex justify-content-end">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" />
                    <label class="form-check-label" for="quizIsActive">is Active ?</label>
                </div>
            </div>
            <div class="col-sm-5 d-grid me-auto">
                <button type="submit" class="btn btn-success"> Save Quiz </button>

            </div>
        </div>
    </div>
</EditForm>


@code
{
    [Parameter]
    public Guid? QuizId { get; set; }

    private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;

    private QuizSaveDto _quiz = new();
    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        if(IsEditCase)
        {
            AppState.ShowLoader("Fetching quiz");
            var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
            AppState.HideLoader();
            if (quiz  == null)
            {
                NavigationManager.NavigateTo("admin/manage-quizes");
                return;
            }
            _quiz = quiz;

        }
        else
        {
            var question = GetDefaultEmptyQuestion();
            _quiz.Question = [question];
        }
        AppState.ShowLoader("Fetching categories");
        _categories= await CategoryApi.GetCategoriesAsync();
        AppState.HideLoader();
    }

    private QuestionDto GetDefaultEmptyQuestion()=>      

        new QuestionDto
        {
            Options = [new(), new()]
        };

    protected override void OnParametersSet()
    {
        if (!QuizId.HasValue && _quiz.Id != Guid.Empty  )
        {
            _quiz= new();
            _quiz.Question = [GetDefaultEmptyQuestion()];
        }
    }

    private void SetOptionAsCorrectAnswer(QuestionDto q ,OptionDto o)
    {
        foreach (var option in q.Options)
        {
            option.IsCorrect = false;
        }
        o.IsCorrect = true;
    }
    private async Task SaveQuizAsync()
    {
        var errorMessage=_quiz.Validate();
        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            await ShowAlertAsync(errorMessage);
            return;
        }
        AppState.ShowLoader("Saving quiz");
        var response = await QuizApi.SaveQuizAsync(_quiz);
        AppState.HideLoader();

        if (!response.IsSuccess)
        {
           await ShowAlertAsync(response.ErrorMessage);
           return;
        }

        NavigationManager.NavigateTo("/admin/manage-quizes");
     
    }

    private async Task ShowAlertAsync(string message,string title="Error")=>
        await JsRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
}
