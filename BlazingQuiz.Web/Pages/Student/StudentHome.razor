@page "/student/home"

@inject IAppState AppState
@inject ICategoryApi CategoryApi
@inject IStudentQuizApi StudentQuizApi
@inject NavigationManager NavigationManager
@inject QuizState QuizState

<SectionContent SectionName="pageTitle">Home</SectionContent>

<div class="container">
    <div class="row">
        <div class="col-sm-3 ms-auto">
            <label class="form-label">Select Category</label>
            <select class="form-control" @bind="_selectedCategoryId" @bind:after="OnSelectCategoryChanged">
                <option value="@Guid.Empty">Select Category</option>
                @foreach (var c in _categories)
                {
                <option value="@c.Id">@c.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        @if (_quizzes.Length==0)
        {
            var message = _selectedCategoryId == Guid.Empty
                ? " There are no active quizzes right now "
                : " There are no active quizzes right now under the selected category ";
            <p class="h4 text-danger mt-5 text-center">@message</p>
        }
        else
        {
            @foreach (var q in _quizzes)
            {
                <div class="col-sm-4 mb-3">
                    <div class="box bg-white p-3">
                        <h5 class="fw-bold">@q.Name</h5>
                        <hr/>
                        <table class="table">
                            <tr>
                                <td>
                                    <label class="fw-bold">Category</label>
                                </td>
                                <td>
                                    <span>@q.CategoryName</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label class="fw-bold">No. of Questions</label>
                                </td>
                                <td>
                                    <span>@q.TotalQuestions question(s)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label class="fw-bold">Total Time</label>
                                </td>
                                <td>
                                    <span>@q.TimeInMinutes minute(s)</span>
                                </td>
                            </tr>
                        </table>
                        <hr/>
                        <button type="button" class="btn btn-sm btn-warning" @onclick="(() => _startingQuiz = q)">Start Quiz</button>
                    </div>
                </div>
            }

        }
    </div>
</div>
@if (_startingQuiz != null)
{
    var title = $"Start {_startingQuiz.Name}?";
    <Modal Title="@title" OnCancelButtonClick="(() => _startingQuiz = null)" OnActionButtonClick="StartQuiz">
        <p class="m-0 p-3">Do you want to start this quiz?<br/>
            You will not be able to pause the quiz.  
        </p>
    </Modal>

}

@code{

    private CategoryDto[] _categories = [];
    private QuizListDto[] _quizzes = [];
    private Guid _selectedCategoryId;
    private bool _isLoading;
    private QuizListDto? _startingQuiz;

    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Fetching categories and quizzes");
        try
        {
            _isLoading = true;
            var categoriesTask = CategoryApi.GetCategoriesAsync();
            _quizzes = await StudentQuizApi.GetActiveQuizzesAsync(_selectedCategoryId);
            _categories = await categoriesTask;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            AppState.HideLoader();
            _isLoading = false;
        }

    }

    private async Task OnSelectCategoryChanged()
    {
        AppState.ShowLoader("Fetching quizzes");

        try
        {
            // Eğer hiçbir kategori seçilmediyse, tüm quizleri getir.
            _quizzes = await StudentQuizApi.GetActiveQuizzesAsync(
                _selectedCategoryId == Guid.Empty ? Guid.Empty : _selectedCategoryId
            );
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            AppState.HideLoader();
        }
    }


    private void StartQuiz()
    {
        QuizState.SetQuiz(_startingQuiz);
        NavigationManager.NavigateTo("student/quiz");
    }
}
