@page "/student/quiz"

@inject QuizState QuizState
@inject NavigationManager NavigationManager
@inject IStudentQuizApi StudentQuizApi


<SectionContent SectionName="pageTitle">Quiz- @QuizState.Quiz.Name [<small>@QuizState.Quiz.TotalQuestions question(s)</small>]</SectionContent>

<div class="row mb-3">
    @*<Timer/>*@
    <div class="col-sm-12">
        <h4 class="mt-3 mb-0 fw-bold">@_question.Text </h4>
        <hr/>
        @foreach (var o in _question.Options)
        {
            <div class="d-flex gap-2 p-3 mb-3 bg-white option-box">
                <input type="radio" class="" 
                       name="rdo_@_question.Id" 
                       id="rdo_@o.Id" 
                       checked="@(_selectedOptionId == o.Id)"
                       @onchange="() => _selectedOptionId=o.Id"/>
                <label for="rdo_@o.Id" class="d-block">@o.Text</label>
            </div>
        }
        <hr/>
        <div class="d-flex justify-content-between align-items-center">
            <button type="button" class="btn btn-danger"@onclick="ExitTestAsync">Exit Test</button>
            @if (!IsLastQuestion)
            {
                <button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Save & Next Quiz</button>

            }
            else
            {
                <button type="button" class="btn btn-success" @onclick="SubmitQuizAsync">Submit Quiz</button>

            }

        </div>
    </div>
</div>

@code {

    private QuestionDto _question=new();
    private int _selectedOptionId;
    private List<QuestionDto> _questions = [];
    private bool IsLastQuestion => _questions.Count == (QuizState.Quiz.TotalQuestions-1);
    
    protected override async Task OnInitializedAsync()
    {
        if (QuizState.Quiz == null || QuizState.StudentQuizId==Guid.Empty) 
        {
            NavigationManager.NavigateTo("student/home",replace:true);
            return;
        }

        QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);

        if (!result.IsSuccess || result.Data == null)
        {
         return;   
        }

        _question = result.Data;

    }

    private async Task SaveAndNextQuestionAsync()
    {
        throw new NotImplementedException();
    }

    private async Task SubmitQuizAsync()
    {
        throw new NotImplementedException();
    }

    private async Task ExitTestAsync()
    {
        throw new NotImplementedException();
    }

}
