@page "/student/quiz"
@layout QuizPageLayout

@inject QuizState QuizState
@inject NavigationManager NavigationManager
@inject IStudentQuizApi StudentQuizApi
@inject IAppState AppState

<SectionContent SectionName="pageTitle">Quiz- @QuizState.Quiz?.Name [<small>@QuizState.Quiz?.TotalQuestions question(s)</small>]</SectionContent>
@if (QuizState.Quiz != null)
{
    <div class="row mb-3">
        <div class="col-sm-12">
            <div class="my-1 d-flex justify-content-between align-items-center">
                <h6>@_questions.Count of @QuizState.Quiz!.TotalQuestions</h6>
                <div>
                    <QuizTimer TotalMinutes="QuizState.Quiz.TimeInMinutes" OnTimerStop="AutoSubmitQuizAsync"/>
                </div>
            </div>
            <h4 class="mt-3 mb-0 fw-bold">@_question.Text </h4>
            <hr/>
            @if (_question.Options.Any())
            {
                @foreach (var o in _question.Options)
                {
                    <div class="d-flex gap-2 p-3 mb-3 bg-white option-box" @onclick="() => _selectedOptionId = o.Id">
                        <input type="radio" class=""
                               name="rdo_@_question.Id"
                               id="rdo_@o.Id"
                               checked="@(_selectedOptionId == o.Id)"
                               @onchange="() => _selectedOptionId = o.Id"/>
                        <label for="rdo_@o.Id" class="d-block">@o.Text</label>
                    </div>
                }
            }
            else
            {
                <p>No options available for this question.</p>
            }

            @if (_errorMessage != null)
            {
                <div class="bg-danger my-3 p-2 d-flex justify-content-between align-items-center">
                    <label class="text-white">@_errorMessage</label>
                    <button type="button" class="btn btn-sm btn-light" @onclick="() => _errorMessage = null">X</button>
                </div>
            }
            <hr/>
            <div class="d-flex justify-content-between align-items-center">
                <button type="button" class="btn btn-danger" @onclick="() => _showExitQuizConfirmation = true">Exit Test</button>
                @if (!IsLastQuestion)
                {
                    <button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Save & Next Quiz</button>
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick="SubmitQuizAsync">Submit Quiz</button>
                }

            </div>
        </div>
    </div>
    
}
@if (_submitQuizMessage !=null)
{
    <Modal Title="Quiz Submitted" OnActionButtonClick="RedirectToMyQuizzes" OnCancelButtonClick="RedirectToMyQuizzes">
        <p class="text-success h5">@_submitQuizMessage</p>
    </Modal>
}
@if (_showExitQuizConfirmation)
{
    <Modal Title="Exit Quiz ?"
           ActionButtonText="Yes"
           OnActionButtonClick="ExitQuizAsync" 
           OnCancelButtonClick="() =>_showExitQuizConfirmation =false ">
        <h5 class="text-danger">Do you really want to exit the quiz?</h5>
    </Modal>
}
@code {

    private QuestionDto _question = new();
    private int _selectedOptionId;
    private List<QuestionDto?> _questions = [];
    private bool IsLastQuestion => _questions.Count == QuizState.Quiz.TotalQuestions;
    private string? _errorMessage;
    private string? _submitQuizMessage;
    private bool _showExitQuizConfirmation;

    protected override async Task OnInitializedAsync()
    {
        if (QuizState.Quiz == null || QuizState.StudentQuizId == Guid.Empty)
        {
            NavigationManager.NavigateTo("student/home", replace: true);
            return;
        }

        await LoadNextQuestionAsync();
    }

    private async Task SaveAndNextQuestionAsync()
    {
        var isResponseSaved= await SaveQuestionResponseAsync();
        
        if (isResponseSaved)
            await LoadNextQuestionAsync();
       
    }

    private async Task SubmitQuizAsync()
    {
        var isResponseSaved= await SaveQuestionResponseAsync();
        if (isResponseSaved)
        {
         
            AppState.ShowLoader("Saving your response");
            try
            {
                QuizApiResponse result = await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
                if (!result.IsSuccess)
                {
                    _errorMessage = result.ErrorMessage;
                    return;
                }
                // TODO : show result in Modal Popup or in a  page
                _submitQuizMessage = "Quiz submitted successfully";
            }
            catch (Exception e)
            {
                _errorMessage = e.Message;
            }
            finally
            {
                AppState.HideLoader();
            }
        }
       
    }

    private async Task ExitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Exiting the quiz ");
            QuizApiResponse result = await StudentQuizApi.ExitQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }
            RedirectToMyQuizzes();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task LoadNextQuestionAsync()
    {
        AppState.ShowLoader("Fetching question");

        try
        {
            QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess || result.Data == null)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }

            _question = result.Data;
            _questions.Add(_question);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task<bool> SaveQuestionResponseAsync()
    {
        _errorMessage = null;
        if (_selectedOptionId == 0)
        {
            _errorMessage = "Please select an option";
            return false;
        }

        AppState.ShowLoader("Saving your response");

        try
        {
            StudentQuizQuestionResponseDto dto = new(QuizState.StudentQuizId, _question.Id, _selectedOptionId);
            QuizApiResponse result = await StudentQuizApi.SaveQuestionResponseAsync(QuizState.StudentQuizId, dto);
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return false;
            }
            _selectedOptionId = 0;
            return true;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            return false;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private void RedirectToMyQuizzes()
    {
        QuizState.StopQuiz();
        NavigationManager.NavigateTo("student/my-quizzes",replace:true);
    }

    private async Task AutoSubmitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Auto Submitting the quiz ");
            QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }

            _submitQuizMessage = "Quiz submitted successfully";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

}